{"version":3,"file":"test.js","sourceRoot":"","sources":["../src/test.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomBytes, timingSafeEqual, createHash } from 'crypto'\nimport { encode, decode } from './b32'\n\nfunction test(buf: Uint8Array | Buffer | string) {\n\tconst s = 'string' === typeof buf\n\t\t? buf\n\t\t: String.fromCodePoint(...buf)\n\tconsole.log('%s %j', s.length.toString().padStart(5), s)\n}\nconst init = process.hrtime()\nfunction rt(diff: number[] = process.hrtime(init)) {\n\tconst tm = (diff[0] + diff[1] / 1_000_000_000)\n\tconsole.log('%sms elapsed', tm.toFixed(9).padStart(12))\n}\nconst okey: Uint8Array[] = []\nfor (let i = 0; i < 35; i++) {\n\tlet j = i + 1\n\tconst buf = new Uint8Array(j)\n\twhile (j--) buf[j] = 0x41 | (j & 1) << 5\n\tokey.push(buf)\n}\nconst okay = okey.map(buf => encode(buf))\nconst otey = okay.map(buf => decode(buf))\nfor (let i = 0; i < okey.length; i++)\n\tfor (const bin of [okey[i], okay[i], otey[i]])\n\t\ttest(bin)\n\nconst buf = Buffer.from('This is a test buffer.')\nrt()\ntest(buf)\n\nconst b32 = encode(buf)\nrt()\ntest(b32)\n\nconst b32Decoded = decode(b32),\n\tback = Buffer.from(b32Decoded.buffer as ArrayBuffer, b32Decoded.byteOffset, b32Decoded.byteLength)\nrt()\ntest(back)\n\nconsole.assert(timingSafeEqual(buf, back), 'buf !== back')\n\nrt()\ntest(Buffer.from('Starting random bytes (shown as hex)'))\nconst rndbuf = randomBytes(16)\nrt()\ntest(rndbuf.toString('hex'))\n\nconst rndb32 = encode(rndbuf)\nrt()\ntest(rndb32)\n\nconst rndb32Decoded = decode(rndb32),\n\trndback = Buffer.from(rndb32Decoded.buffer as ArrayBuffer, rndb32Decoded.byteOffset, rndb32Decoded.byteLength)\n\nrt()\ntest(rndback.toString('hex'))\n\nconsole.assert(timingSafeEqual(rndbuf, rndback), 'rndbuf !== rndback')\n\nrt()\ntest(Buffer.from('Testing 20-byte hash sum'))\nconst hash = createHash('sha1').update('Hello world!').digest()\nrt()\ntest(hash.toString('hex'))\n\nconst hashb32 = encode(hash, true)\nrt()\ntest(hashb32)\n\nconst hash32d = decode(hashb32),\n\thashback = Buffer.from(hash32d.buffer as ArrayBuffer, hash32d.byteOffset, hash32d.byteLength)\nrt()\ntest(hashback.toString('hex'))\n"]}