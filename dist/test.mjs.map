{"version":3,"file":"test.js","sourceRoot":"","sources":["../src/test.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomBytes, timingSafeEqual } from 'crypto'\nimport { encode, decode } from './b32'\n\nfunction padStart(s:string, n:number = 0, c:string = ' '):string {\n\t// if ('padStart' in s) return s.padStart(n, c)\n\twhile (s.length < n)\n\t\ts = c + s\n\treturn s\n}\nfunction test(buf:Uint8Array | Buffer | string) {\n\tconst s = 'string' === typeof buf\n\t\t? buf\n\t\t: String.fromCodePoint(...buf)\n\tconsole.log(\n\t\t'%s %j',\n\t\tpadStart(s.length.toString(), 5),\n\t\ts.toString()\n\t)\n}\nconst init = process.hrtime()\nfunction rt(diff:number[] = process.hrtime(init)) {\n\tconst tm = (diff[0] + diff[1] / 1_000_000_000)\n\tconsole.log(\n\t\t'%sms elapsed',\n\t\tpadStart(tm.toFixed(9), 12)\n\t)\n}\nconst okey:Uint8Array[] = []\nfor (let i = 0; i < 35; i++) {\n\tconst buf = new Uint8Array(i + 1)\n\tfor (let j = 0; j < buf.length; j++)\n\t\tbuf[j] = j & 1 ? 0x41 : 0x61\n\tokey.push(buf)\n}\nconst okay = okey.map(buf => encode(buf))\nconst otey = okay.map(buf => decode(buf))\nfor (let i = 0; i < okey.length; i++)\n\tfor (const bin of [okey[i], okay[i], otey[i]])\n\t\ttest(bin)\n\nconst buf = Buffer.from('This is a test buffer.')\nrt()\ntest(buf)\n\nconst b32 = encode(buf)\nrt()\ntest(b32)\n\nconst b32Decoded = decode(b32),\n\tback = Buffer.from(b32Decoded.buffer as ArrayBuffer, b32Decoded.byteOffset, b32Decoded.byteLength)\nrt()\ntest(back)\n\nconsole.assert(timingSafeEqual(buf, back), 'buf !== back')\n\nrt()\ntest(Buffer.from('Starting random bytes (shown as hex)'))\nconst rndbuf = randomBytes(16)\nrt()\ntest(rndbuf.toString('hex'))\n\nconst rndb32 = encode(rndbuf)\nrt()\ntest(rndb32)\n\nconst rndb32Decoded = decode(rndb32),\n\trndback = Buffer.from(rndb32Decoded.buffer as ArrayBuffer, rndb32Decoded.byteOffset, rndb32Decoded.byteLength)\n\nrt()\ntest(rndback.toString('hex'))\n\nconsole.assert(timingSafeEqual(rndbuf, rndback), 'rndbuf !== rndback')\n\n"]}